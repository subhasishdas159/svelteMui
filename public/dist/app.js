/* src\app.svelte generated by Svelte v3.20.1 */
import { SvelteComponentDev, add_flush_callback, add_location, attr_dev, bind, binding_callbacks, create_component, destroy_component, detach_dev, dispatch_dev, element, init, insert_dev, mount_component, safe_not_equal, space, transition_in, transition_out, validate_slots } from "/dist/web_modules/svelte/internal.js";
import Router from "/dist/web_modules/svelte-spa-router.js";
import Section from "./section.js";
import SidePanel from "./comps/sidePanel.js";
const file = "src\\app.svelte";

function create_fragment(ctx) {
  let updating_rightVisible;
  let t0;
  let h1;
  let t2;
  let h2;
  let t4;
  let a;
  let t6;
  let current;

  function sidepanel_rightVisible_binding(value) {
    /*sidepanel_rightVisible_binding*/
    ctx[2].call(null, value);
  }

  let sidepanel_props = {};

  if (
  /*rightVisible*/
  ctx[0] !== void 0) {
    sidepanel_props.rightVisible =
    /*rightVisible*/
    ctx[0];
  }

  const sidepanel = new SidePanel({
    props: sidepanel_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(sidepanel, "rightVisible", sidepanel_rightVisible_binding));
  const router = new Router({
    props: {
      routes:
      /*routes*/
      ctx[1]
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(sidepanel.$$.fragment);
      t0 = space();
      h1 = element("h1");
      h1.textContent = "hello world";
      t2 = space();
      h2 = element("h2");
      h2.textContent = "helo helo okay";
      t4 = space();
      a = element("a");
      a.textContent = "Click";
      t6 = space();
      create_component(router.$$.fragment);
      add_location(h1, file, 15, 0, 278);
      add_location(h2, file, 16, 0, 300);
      attr_dev(a, "href", "#/section");
      add_location(a, file, 18, 0, 327);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      mount_component(sidepanel, target, anchor);
      insert_dev(target, t0, anchor);
      insert_dev(target, h1, anchor);
      insert_dev(target, t2, anchor);
      insert_dev(target, h2, anchor);
      insert_dev(target, t4, anchor);
      insert_dev(target, a, anchor);
      insert_dev(target, t6, anchor);
      mount_component(router, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const sidepanel_changes = {};

      if (!updating_rightVisible && dirty &
      /*rightVisible*/
      1) {
        updating_rightVisible = true;
        sidepanel_changes.rightVisible =
        /*rightVisible*/
        ctx[0];
        add_flush_callback(() => updating_rightVisible = false);
      }

      sidepanel.$set(sidepanel_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(sidepanel.$$.fragment, local);
      transition_in(router.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(sidepanel.$$.fragment, local);
      transition_out(router.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(sidepanel, detaching);
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(h1);
      if (detaching) detach_dev(t2);
      if (detaching) detach_dev(h2);
      if (detaching) detach_dev(t4);
      if (detaching) detach_dev(a);
      if (detaching) detach_dev(t6);
      destroy_component(router, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  const routes = {
    "/section": Section
  };
  let rightVisible = true;
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("App", $$slots, []);

  function sidepanel_rightVisible_binding(value) {
    rightVisible = value;
    $$invalidate(0, rightVisible);
  }

  $$self.$capture_state = () => ({
    Router,
    Section,
    SidePanel,
    routes,
    rightVisible
  });

  $$self.$inject_state = $$props => {
    if ("rightVisible" in $$props) $$invalidate(0, rightVisible = $$props.rightVisible);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [rightVisible, routes, sidepanel_rightVisible_binding];
}

class App extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "App",
      options,
      id: create_fragment.name
    });
  }

}

export default App;