/* src\comps\sidePanel.svelte generated by Svelte v3.20.1 */
import { SvelteComponentDev, add_flush_callback, add_location, append_dev, attr_dev, bind, binding_callbacks, create_component, destroy_component, detach_dev, dispatch_dev, element, init, insert_dev, mount_component, safe_not_equal, set_style, space, transition_in, transition_out, validate_slots } from "/dist/web_modules/svelte/internal.js";
import { Sidepanel } from "/dist/web_modules/svelte-mui.js";
const file = "src\\comps\\sidePanel.svelte"; // (7:0) <Sidepanel right bind:visible={rightVisible}>

function create_default_slot(ctx) {
  let div;
  let t1;
  let p;
  let i;
  const block = {
    c: function create() {
      div = element("div");
      div.textContent = "Subhasish Das";
      t1 = space();
      p = element("p");
      i = element("i");
      i.textContent = "Menu 1";
      attr_dev(div, "class", "logo");
      set_style(div, "padding-left", "1rem");
      add_location(div, file, 7, 4, 159);
      set_style(i, "padding", "12px");
      add_location(i, file, 9, 8, 243);
      add_location(p, file, 8, 4, 230);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      insert_dev(target, t1, anchor);
      insert_dev(target, p, anchor);
      append_dev(p, i);
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(div);
      if (detaching) detach_dev(t1);
      if (detaching) detach_dev(p);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(7:0) <Sidepanel right bind:visible={rightVisible}>",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let updating_visible;
  let current;

  function sidepanel_visible_binding(value) {
    /*sidepanel_visible_binding*/
    ctx[1].call(null, value);
  }

  let sidepanel_props = {
    right: true,
    $$slots: {
      default: [create_default_slot]
    },
    $$scope: {
      ctx
    }
  };

  if (
  /*rightVisible*/
  ctx[0] !== void 0) {
    sidepanel_props.visible =
    /*rightVisible*/
    ctx[0];
  }

  const sidepanel = new Sidepanel({
    props: sidepanel_props,
    $$inline: true
  });
  binding_callbacks.push(() => bind(sidepanel, "visible", sidepanel_visible_binding));
  const block = {
    c: function create() {
      create_component(sidepanel.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      mount_component(sidepanel, target, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      const sidepanel_changes = {};

      if (dirty &
      /*$$scope*/
      4) {
        sidepanel_changes.$$scope = {
          dirty,
          ctx
        };
      }

      if (!updating_visible && dirty &
      /*rightVisible*/
      1) {
        updating_visible = true;
        sidepanel_changes.visible =
        /*rightVisible*/
        ctx[0];
        add_flush_callback(() => updating_visible = false);
      }

      sidepanel.$set(sidepanel_changes);
    },
    i: function intro(local) {
      if (current) return;
      transition_in(sidepanel.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(sidepanel.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(sidepanel, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  let {
    rightVisible = false
  } = $$props;
  const writable_props = ["rightVisible"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SidePanel> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  validate_slots("SidePanel", $$slots, []);

  function sidepanel_visible_binding(value) {
    rightVisible = value;
    $$invalidate(0, rightVisible);
  }

  $$self.$set = $$props => {
    if ("rightVisible" in $$props) $$invalidate(0, rightVisible = $$props.rightVisible);
  };

  $$self.$capture_state = () => ({
    rightVisible,
    Sidepanel
  });

  $$self.$inject_state = $$props => {
    if ("rightVisible" in $$props) $$invalidate(0, rightVisible = $$props.rightVisible);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  return [rightVisible, sidepanel_visible_binding];
}

class SidePanel extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      rightVisible: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "SidePanel",
      options,
      id: create_fragment.name
    });
  }

  get rightVisible() {
    throw new Error("<SidePanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set rightVisible(value) {
    throw new Error("<SidePanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

export default SidePanel;